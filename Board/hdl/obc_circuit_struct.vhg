--
-- VHDL Architecture Board.obc_circuit.struct
--
-- Created:
--          by - student.UNKNOWN (DESKTOP-3I0F3HP)
--          at - 15:14:38 28.07.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
USE ieee.std_logic_arith.all;
LIBRARY OBC;
USE OBC.pkg_scala2hdl.all;
USE OBC.all;
USE OBC.pkg_enum.all;

LIBRARY Board;

ARCHITECTURE struct OF obc_circuit IS

   -- Architecture declarations
   constant signalBitNb: positive := 16;
   constant phaseBitNb: positive := 17;
   constant stepX: positive := 2;
   constant stepY: positive := 3;

   -- Internal signal declarations
   SIGNAL SPI1                 : std_logic_vector(PinNumber-1 DOWNTO 0);
   SIGNAL SPI2                 : std_logic_vector(PinNumber-1 DOWNTO 0);
   SIGNAL SPI3                 : std_logic_vector(PinNumber-1 DOWNTO 0);
   SIGNAL SPI4                 : std_logic_vector(PinNumber-1 DOWNTO 0);
   SIGNAL io_gpioA_read        : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioA_write       : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioA_writeEnable : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioB_read        : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioB_write       : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioB_writeEnable : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioC_read        : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioC_write       : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioC_writeEnable : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioD_read        : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioD_write       : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_gpioD_writeEnable : std_logic_vector(31 DOWNTO 0);
   SIGNAL io_uart_txd          : std_logic;
   SIGNAL logic1               : std_uLogic;
   SIGNAL reset                : std_ulogic;
   SIGNAL resetSnch_N          : std_ulogic;
   SIGNAL resetSynch           : std_ulogic;


   -- Component Declarations
   COMPONENT DFF
   PORT (
      CLK : IN     std_uLogic ;
      CLR : IN     std_uLogic ;
      D   : IN     std_uLogic ;
      Q   : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT inverterIn
   PORT (
      in1  : IN     std_uLogic ;
      out1 : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT Murax
   PORT (
      io_asyncReset        : IN     std_logic;
      io_gpioA_read        : IN     std_logic_vector (31 DOWNTO 0);
      io_gpioB_read        : IN     std_logic_vector (31 DOWNTO 0);
      io_gpioC_read        : IN     std_logic_vector (31 DOWNTO 0);
      io_gpioD_read        : IN     std_logic_vector (31 DOWNTO 0);
      io_jtag_tck          : IN     std_logic;
      io_jtag_tdi          : IN     std_logic;
      io_jtag_tms          : IN     std_logic;
      io_mainClk           : IN     std_logic;
      io_uart_rxd          : IN     std_logic;
      io_gpioA_write       : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioA_writeEnable : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioB_write       : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioB_writeEnable : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioC_write       : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioC_writeEnable : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioD_write       : OUT    std_logic_vector (31 DOWNTO 0);
      io_gpioD_writeEnable : OUT    std_logic_vector (31 DOWNTO 0);
      io_jtag_tdo          : OUT    std_logic;
      io_uart_txd          : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT SPI_Control
   GENERIC (
      dataBitNb : integer := 8
   );
   PORT (
      SPI1_DataOut     : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI1_MISO        : IN     std_ulogic ;
      SPI1_Read        : IN     std_ulogic ;
      SPI1_Select      : IN     std_ulogic_vector (1 DOWNTO 0);
      SPI1_Write       : IN     std_ulogic ;
      SPI2_DataOut     : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI2_MISO        : IN     std_ulogic ;
      SPI2_Read        : IN     std_ulogic ;
      SPI2_Write       : IN     std_ulogic ;
      SPI3_DataOut     : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI3_MISO        : IN     std_ulogic ;
      SPI3_Read        : IN     std_ulogic ;
      SPI3_Select      : IN     std_ulogic_vector (1 DOWNTO 0);
      SPI3_Write       : IN     std_ulogic ;
      SPI4_DataOut     : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI4_MISO        : IN     std_ulogic ;
      SPI4_Read        : IN     std_ulogic ;
      SPI4_Select      : IN     std_ulogic_vector (1 DOWNTO 0);
      SPI4_Write       : IN     std_ulogic ;
      clock            : IN     std_logic ;
      reset            : IN     std_logic ;
      SPI1_DataIn      : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI1_MOSI        : OUT    std_ulogic ;
      SPI1_SS1_n       : OUT    std_ulogic ;
      SPI1_SS2_n       : OUT    std_ulogic ;
      SPI1_SS3_n       : OUT    std_ulogic ;
      SPI1_endTransfer : OUT    std_logic ;
      SPI1_masterFull  : OUT    std_ulogic ;
      SPI1_sClk        : OUT    std_ulogic ;
      SPI1_slaveEmpty  : OUT    std_ulogic ;
      SPI2_DataIn      : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI2_MOSI        : OUT    std_ulogic ;
      SPI2_SS1_n       : OUT    std_ulogic ;
      SPI2_endTransfer : OUT    std_logic ;
      SPI2_masterFull  : OUT    std_ulogic ;
      SPI2_sClk        : OUT    std_ulogic ;
      SPI2_slaveEmpty  : OUT    std_ulogic ;
      SPI3_DataIn      : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI3_MOSI        : OUT    std_ulogic ;
      SPI3_SS1_n       : OUT    std_ulogic ;
      SPI3_SS2_n       : OUT    std_ulogic ;
      SPI3_endTransfer : OUT    std_logic ;
      SPI3_masterFull  : OUT    std_ulogic ;
      SPI3_sClk        : OUT    std_ulogic ;
      SPI3_slaveEmpty  : OUT    std_ulogic ;
      SPI4_DataIn      : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      SPI4_MOSI        : OUT    std_ulogic ;
      SPI4_SS1_n       : OUT    std_ulogic ;
      SPI4_SS2_n       : OUT    std_ulogic ;
      SPI4_endTransfer : OUT    std_logic ;
      SPI4_masterFull  : OUT    std_ulogic ;
      SPI4_sClk        : OUT    std_ulogic ;
      SPI4_slaveEmpty  : OUT    std_ulogic 
   );
   END COMPONENT;
   COMPONENT gpioBankControl
   GENERIC (
      PinNumber : positive := 31
   );
   PORT (
      write   : IN     std_logic_vector (PinNumber-1 DOWNTO 0);
      writeEn : IN     std_logic_vector (PinNumber-1 DOWNTO 0);
      read    : OUT    std_logic_vector (PinNumber-1 DOWNTO 0);
      pins    : INOUT  std_logic_vector (PinNumber-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : DFF USE ENTITY Board.DFF;
   FOR ALL : Murax USE ENTITY OBC.Murax;
   FOR ALL : SPI_Control USE ENTITY OBC.SPI_Control;
   FOR ALL : gpioBankControl USE ENTITY OBC.gpioBankControl;
   FOR ALL : inverterIn USE ENTITY Board.inverterIn;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 4 eb4
   logic1 <= '1';


   -- Instance port mappings.
   I_dff : DFF
      PORT MAP (
         CLK => clock,
         CLR => reset,
         D   => logic1,
         Q   => resetSnch_N
      );
   I_inv1 : inverterIn
      PORT MAP (
         in1  => reset_N,
         out1 => reset
      );
   I_inv2 : inverterIn
      PORT MAP (
         in1  => resetSnch_N,
         out1 => resetSynch
      );
   I1 : Murax
      PORT MAP (
         io_asyncReset        => reset_N,
         io_mainClk           => clock,
         io_jtag_tms          => io_jtag_tms,
         io_jtag_tdi          => io_jtag_tdi,
         io_jtag_tdo          => io_jtag_tdo,
         io_jtag_tck          => io_jtag_tck,
         io_gpioA_read        => io_gpioA_read,
         io_gpioA_write       => io_gpioA_write,
         io_gpioA_writeEnable => io_gpioA_writeEnable,
         io_gpioB_read        => io_gpioB_read,
         io_gpioB_write       => io_gpioB_write,
         io_gpioB_writeEnable => io_gpioB_writeEnable,
         io_gpioC_read        => io_gpioC_read,
         io_gpioC_write       => io_gpioC_write,
         io_gpioC_writeEnable => io_gpioC_writeEnable,
         io_gpioD_read        => io_gpioD_read,
         io_gpioD_write       => io_gpioD_write,
         io_gpioD_writeEnable => io_gpioD_writeEnable,
         io_uart_txd          => io_uart_txd,
         io_uart_rxd          => io_uart_txd
      );
   I0 : SPI_Control
      PORT MAP (
         SPI1_DataOut     => SPI1(7 DOWNTO 0),
         SPI1_MISO        => SPI1_MISO,
         SPI1_Read        => SPI1(18),
         SPI1_Select      => SPI1(22 DOWNTO 21),
         SPI1_Write       => SPI1(16),
         SPI2_DataOut     => SPI2(7 DOWNTO 0),
         SPI2_MISO        => SPI2_MISO,
         SPI2_Read        => SPI2(18),
         SPI2_Write       => SPI2(16),
         SPI3_DataOut     => SPI3(7 DOWNTO 0),
         SPI3_MISO        => SPI3_MISO,
         SPI3_Read        => SPI3(18),
         SPI3_Select      => SPI3(22 DOWNTO 21),
         SPI3_Write       => SPI3(16),
         SPI4_DataOut     => SPI4(7 DOWNTO 0),
         SPI4_MISO        => SPI4_MISO,
         SPI4_Read        => SPI4(18),
         SPI4_Select      => SPI4(22 DOWNTO 21),
         SPI4_Write       => SPI4(16),
         clock            => clock,
         reset            => resetSynch,
         SPI1_DataIn      => SPI1(15 DOWNTO 8),
         SPI1_MOSI        => SPI1_MOSI,
         SPI1_SS1_n       => SPI1_SS1_n,
         SPI1_SS2_n       => SPI1_SS2_n,
         SPI1_SS3_n       => SPI1_SS3_n,
         SPI1_endTransfer => SPI1(20),
         SPI1_masterFull  => SPI1(17),
         SPI1_sClk        => SPI1_sClk,
         SPI1_slaveEmpty  => SPI1(19),
         SPI2_DataIn      => SPI2(15 DOWNTO 8),
         SPI2_MOSI        => SPI2_MOSI,
         SPI2_SS1_n       => SPI2_SS1_n,
         SPI2_endTransfer => SPI2(20),
         SPI2_masterFull  => SPI2(17),
         SPI2_sClk        => SPI2_sClk,
         SPI2_slaveEmpty  => SPI2(19),
         SPI3_DataIn      => SPI3(15 DOWNTO 8),
         SPI3_MOSI        => SPI3_MOSI,
         SPI3_SS1_n       => SPI3_SS1_n,
         SPI3_SS2_n       => SPI3_SS2_n,
         SPI3_endTransfer => SPI3(20),
         SPI3_masterFull  => SPI3(17),
         SPI3_sClk        => SPI3_sClk,
         SPI3_slaveEmpty  => SPI3(19),
         SPI4_DataIn      => SPI4(15 DOWNTO 8),
         SPI4_MOSI        => SPI4_MOSI,
         SPI4_SS1_n       => SPI4_SS1_n,
         SPI4_SS2_n       => SPI4_SS2_n,
         SPI4_endTransfer => SPI4(20),
         SPI4_masterFull  => SPI4(17),
         SPI4_sClk        => SPI4_sClk,
         SPI4_slaveEmpty  => SPI4(19)
      );
   I2 : gpioBankControl
      GENERIC MAP (
         PinNumber => 32
      )
      PORT MAP (
         write   => io_gpioA_write,
         writeEn => io_gpioA_writeEnable,
         read    => io_gpioA_read,
         pins    => SPI1
      );
   I3 : gpioBankControl
      GENERIC MAP (
         PinNumber => 32
      )
      PORT MAP (
         write   => io_gpioB_write,
         writeEn => io_gpioB_writeEnable,
         read    => io_gpioB_read,
         pins    => SPI2
      );
   I4 : gpioBankControl
      GENERIC MAP (
         PinNumber => 32
      )
      PORT MAP (
         write   => io_gpioC_write,
         writeEn => io_gpioC_writeEnable,
         read    => io_gpioC_read,
         pins    => SPI3
      );
   I5 : gpioBankControl
      GENERIC MAP (
         PinNumber => 32
      )
      PORT MAP (
         write   => io_gpioD_write,
         writeEn => io_gpioD_writeEnable,
         read    => io_gpioD_read,
         pins    => SPI4
      );

END struct;
